
PWM_volante.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000258  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000722  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000676  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000019d  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a3  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000177  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_11>
  30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_PWM>:
int Duty = 0;

void init_PWM(void)
{

	DDRB  = 0b00001110;			//pinos OC1B e OC1A (PB2 e PB1) como saída
  90:	8e e0       	ldi	r24, 0x0E	; 14
  92:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11110001;			//zera saídas e habilita pull-ups nos pinos não utilizados
  94:	81 ef       	ldi	r24, 0xF1	; 241
  96:	85 b9       	out	0x05, r24	; 5
	//valor colocado no registrador de interrupção mínimo: 65535*3,8/5 = 49807 = 0xC28F
	//valor de tensão máximo desejado: 4,6 V
	//valor máximo colocado: 65535*4,6/5 = 60292 = 0xEB84
	//uma interrupção ocorre em 65535, com o intuito de colocar o valor positivo na saída, para depois este ser zerado pela outra

	TCCR1B |= (1<<CS10)|(1<<WGM12);						//sem prescaler modo CTC
  98:	e1 e8       	ldi	r30, 0x81	; 129
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	89 60       	ori	r24, 0x09	; 9
  a0:	80 83       	st	Z, r24
	TCNT1  = 0x00;										//Timer/Counter1 inicia em 0
  a2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1B)|(1<<OCIE1A);                   //habilita interrupção de comparação do timer1 com A e com B
  aa:	ef e6       	ldi	r30, 0x6F	; 111
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
	OCR1A = 0xFFFF;                                     //Timer Reinicia no máximo
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	9f ef       	ldi	r25, 0xFF	; 255
  b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0xC28F;                                     //Troca de valor Duty Cycle
  c0:	8f e8       	ldi	r24, 0x8F	; 143
  c2:	92 ec       	ldi	r25, 0xC2	; 194
  c4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  c8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  cc:	08 95       	ret

000000ce <__vector_11>:
	
	
  
}

ISR(TIMER1_COMPA_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
	
	PORTB |= 0x02;                                        //Seta PB1 em nível alto, PWM na porta PB1
  d8:	29 9a       	sbi	0x05, 1	; 5

}
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_12>:

ISR(TIMER1_COMPB_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25

	PORTB &= ~0x02 ;                                      //Seta PB1 em nível baixo 
  fa:	29 98       	cbi	0x05, 1	; 5
	OCR1B = 49807 + 1311*Duty;                       //Formula do Duty cycle do sistema, indo de 3,8V a 4,6V.
  fc:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 100:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 104:	2f e1       	ldi	r18, 0x1F	; 31
 106:	35 e0       	ldi	r19, 0x05	; 5
 108:	42 9f       	mul	r20, r18
 10a:	c0 01       	movw	r24, r0
 10c:	43 9f       	mul	r20, r19
 10e:	90 0d       	add	r25, r0
 110:	52 9f       	mul	r21, r18
 112:	90 0d       	add	r25, r0
 114:	11 24       	eor	r1, r1
 116:	81 57       	subi	r24, 0x71	; 113
 118:	9d 43       	sbci	r25, 0x3D	; 61
 11a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 11e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	5f 91       	pop	r21
 128:	4f 91       	pop	r20
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <Muda_Duty>:

void Muda_Duty(){                                         //Muda duty cycle do sistema
	

	if(Duty>8) 
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 140:	89 30       	cpi	r24, 0x09	; 9
 142:	91 05       	cpc	r25, r1
 144:	2c f0       	brlt	.+10     	; 0x150 <Muda_Duty+0x18>
	{
		//Compara valor máximo e mínimo de D, para impedir que o valor va para algo inesperado
		Duty = 0;
 146:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 14a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 14e:	06 c0       	rjmp	.+12     	; 0x15c <Muda_Duty+0x24>
	}
	else
	{
		if(Duty<0)	
 150:	99 23       	and	r25, r25
 152:	24 f4       	brge	.+8      	; 0x15c <Muda_Duty+0x24>
		{
			Duty = 0;			
 154:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 158:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}		
	}
	
	Duty++;                                    //Muda duty cycle para incrementar 0,1 V
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 16a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 16e:	08 95       	ret

00000170 <__vector_3>:
	//OCR1A = 40000 + 10000*Duty/100;                      //Formula do Duty cycle do sistema, indo de 3,8V a 4,6V.
}


ISR(PCINT0_vect) {						//detecta troca de estado em portas B
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	if(PINB & (1 << PINB5)) //detecta HIGH em PB5
 192:	1d 9b       	sbis	0x03, 5	; 3
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <__vector_3+0x32>
	{			
		PORTB ^= 0x08;		//0b0000 1000 inverte PB3
 196:	95 b1       	in	r25, 0x05	; 5
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	89 27       	eor	r24, r25
 19c:	85 b9       	out	0x05, r24	; 5
		Muda_Duty();
 19e:	0e 94 9c 00 	call	0x138	; 0x138 <Muda_Duty>
	}
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <main>:


int main(void)
{
	init_PWM();
 1c4:	0e 94 48 00 	call	0x90	; 0x90 <init_PWM>
	PCICR |= (1<<PCIE0);			//Habilita interrupção por troca nas portas B0 A B5
 1c8:	e8 e6       	ldi	r30, 0x68	; 104
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT5);		//Habilita interrupção por troca em PB5
 1d2:	eb e6       	ldi	r30, 0x6B	; 107
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	80 83       	st	Z, r24
    sei();
 1dc:	78 94       	sei
 1de:	ff cf       	rjmp	.-2      	; 0x1de <main+0x1a>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
